import 'dart:io';
import 'package:flutter/material.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:path_provider/path_provider.dart';
import 'package:flutter/services.dart';

class PDFService {
  Future<String> generateTransactionPDF({
    required List<Map<String, dynamic>> transactions,
    String title = 'Transaction Report',
  }) async {
    // Create PDF document
    final pdf = pw.Document();

    try {
      // Load company logo
      final logoImage = await rootBundle.load('assets/welcomePage.png');
      final logoImageData = logoImage.buffer.asUint8List();

      // Create the page
      pdf.addPage(
        pw.MultiPage(
          pageFormat: PdfPageFormat.a4,
          margin: const pw.EdgeInsets.all(32),
          build: (pw.Context context) {
            return <pw.Widget>[
              // Header with Logo and Company Name
              pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                children: [
                  pw.Row(
                    children: [
                      pw.Image(
                        pw.MemoryImage(logoImageData),
                        width: 50,
                        height: 50,
                      ),
                      pw.SizedBox(width: 10),
                      pw.Text(
                        'Pain Pay',
                        style: pw.TextStyle(
                          fontSize: 24,
                          fontWeight: pw.FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  pw.Text(
                    DateTime.now().toString().split('.')[0],
                    style: const pw.TextStyle(
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
              pw.SizedBox(height: 30),

              // Title
              pw.Center(
                child: pw.Text(
                  title,
                  style: pw.TextStyle(
                    fontSize: 20,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
              ),
              pw.SizedBox(height: 20),

              // Transactions table
              _createTransactionTable(transactions),

              // Footer
              pw.SizedBox(height: 20),
              pw.Footer(
                leading: pw.Text(
                  'Generated by Pain Pay',
                  style: pw.TextStyle(
                    fontSize: 8,
                    color: PdfColors.grey600,
                  ),
                ),
              ),
            ];
          },
        ),
      );

      // Save the PDF
      return await _savePDFToFile(pdf);
    } catch (e) {
      print('Error generating PDF: $e');
      rethrow;
    }
  }

  pw.Widget _createTransactionTable(List<Map<String, dynamic>> transactions) {
    return pw.Table(
      border: pw.TableBorder.all(width: 0.5),
      children: [
        // Header Row
        pw.TableRow(
          decoration: pw.BoxDecoration(
            color: PdfColors.green,
          ),
          children: [
            _createTableCell('ID', isHeader: true),
            _createTableCell('Type', isHeader: true),
            _createTableCell('Amount', isHeader: true),
            // _createTableCell('Status', isHeader: true),
            _createTableCell('Date', isHeader: true),
          ],
        ),
        // Data Rows
        ...transactions.map((transaction) {
          return pw.TableRow(
            children: [
              _createTableCell(transaction['transaction_id']?.toString() ?? ''),
              _createTableCell(transaction['trans_type']?.toString() ?? ''),
              _createTableCell(
                  '${transaction['currency']} ${transaction['value']?.toString() ?? ''}'),
              // _createTableCell(transaction['status']?.toString() ?? ''),
              _createTableCell(
                  _formatDate(transaction['created_at']?.toString() ?? '')),
            ],
          );
        }),
      ],
    );
  }

  pw.Widget _createTableCell(String text, {bool isHeader = false}) {
    return pw.Padding(
      padding: const pw.EdgeInsets.all(8),
      child: pw.Text(
        text,
        style: pw.TextStyle(
          color: isHeader ? PdfColors.white : PdfColors.black,
          fontSize: 10,
          fontWeight: isHeader ? pw.FontWeight.bold : pw.FontWeight.normal,
        ),
        textAlign: pw.TextAlign.center,
      ),
    );
  }

  String _formatDate(String dateStr) {
    try {
      final date = DateTime.parse(dateStr);
      return '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';
    } catch (e) {
      return dateStr;
    }
  }

  Future<String> _savePDFToFile(pw.Document pdf) async {
    final dir = await getApplicationDocumentsDirectory();
    final fileName =
        'PainPay_transactions_${DateTime.now().millisecondsSinceEpoch}.pdf';
    final file = File('${dir.path}/$fileName');
    await file.writeAsBytes(await pdf.save());
    print('PDF saved at: ${file.path}');
    return file.path;
  }
}
